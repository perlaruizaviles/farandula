exports[`Rendering ItineraryList  Should create an snapshot for ItineraryList 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Segment
    color="orange"
    raised={true}>
    <Dimmer
        active={undefined}
        inverted={true}>
        <Loader
            content="Loading" />
    </Dimmer>
    <ItemGroup
        divided={true}>
        <Item>
            <Message
                content="Search haven\'t been done"
                header="No results to show"
                icon="warning sign"
                warning={true} />
        </Item>
        
    </ItemGroup>
</Segment>,
  "nodes": Array [
    <Segment
      color="orange"
      raised={true}>
      <Dimmer
            active={undefined}
            inverted={true}>
            <Loader
                  content="Loading" />
      </Dimmer>
      <ItemGroup
            divided={true}>
            <Item>
                  <Message
                        content="Search haven\'t been done"
                        header="No results to show"
                        icon="warning sign"
                        warning={true} />
            </Item>
            
      </ItemGroup>
</Segment>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <ItineraryList />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": ItineraryList {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Segment
          color="orange"
          raised={true}>
          <Dimmer
                    active={undefined}
                    inverted={true}>
                    <Loader
                              content="Loading" />
          </Dimmer>
          <ItemGroup
                    divided={true}>
                    <Item>
                              <Message
                                        content="Search haven\'t been done"
                                        header="No results to show"
                                        icon="warning sign"
                                        warning={true} />
                    </Item>
                    
          </ItemGroup>
</Segment>,
        "_debugID": 2,
        "_renderedOutput": <Segment
          color="orange"
          raised={true}>
          <Dimmer
                    active={undefined}
                    inverted={true}>
                    <Loader
                              content="Loading" />
          </Dimmer>
          <ItemGroup
                    divided={true}>
                    <Item>
                              <Message
                                        content="Search haven\'t been done"
                                        header="No results to show"
                                        icon="warning sign"
                                        warning={true} />
                    </Item>
                    
          </ItemGroup>
</Segment>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ItineraryList />,
}
`;
